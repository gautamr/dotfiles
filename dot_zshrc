#export LANG=en_US.UTF-8
#export LC_ALL=en_US.UTF-8
#export LC_CTYPE=en_US.UTF-8

# For managing different versions use `asdf`
#. $(brew --prefix asdf)/libexec/asdf.sh
#. ~/.asdf/plugins/java/set-java-home.zsh

# For managing differen versions of NodeJS use `asdf`
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"

# Add globally installed `npm` packages in $PATH
export PATH=$PATH:$(npm get prefix -g)/bin

# GCP
#export CLOUDSDK_CONFIG=$HOME/.config/gcloud
#source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
#source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"

# AWS
#export AWS_PROFILE=qa
#export AWS_REGION=us-east-1
#export AWS_DEFAULT_REGION=us-east-1

# Clojure
export LEIN_USE_BOOTCLASSPATH=no
#export PATH="$HOME/.local/share/nvim/mason/bin:$PATH"

# Android
#export ANDROID_STUDIO_HOME="/Applications/Android Studio.app/Contents"
#export ANDROID_AVD_HOME=$HOME/.android/avd

# Dart/Flutter setup
#export ANDROID_SDK_ROOT="$HOME/Library/Android/sdk"
#export ANDROID_HOME=$ANDROID_SDK_ROOT
#export FLUTTER_HOME=/usr/local/Caskroom/flutter/latest/flutter
#export DART_HOME=$FLUTTER_HOME/bin/cache/dart-sdk
#export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools/platform-tools:$DART_HOME/bin"
#export PATH="$PATH":"$HOME/.pub-cache/bin"

# Haskell
#[ -f "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env" ] && source "${GHCUP_INSTALL_BASE_PREFIX:=$HOME}/.ghcup/env"
#export PATH=$PATH:~/.ghcup/bin

# Python
export VIRTUALENVWRAPPER_PYTHON=$(which python)
export VIRTUALENVWRAPPER_VIRTUALENV=$(which virtualenv)
export WORKON_HOME=~/.virtualenvs
export PROJECT_HOME=~/dev-projects
#export PATH=~/.local/bin:$PATH
# installed with pip via asdf
#source $(asdf which virtualenvwrapper.sh)
#export PATH=$PATH:$HOME/.virtualenvs/default/lib/python3.8/site-packages
#export PATH=~/Library/Python/3.9/bin:$PATH

# postgres
#export PATH="/usr/local/opt/postgresql@16/bin:$PATH"
#export LDFLAGS="-L/usr/local/opt/postgresql@16/lib"
#export CPPFLAGS="-I/usr/local/opt/postgresql@16/include"
#export PKG_CONFIG_PATH="/usr/local/opt/postgresql@16/lib/pkgconfig"

eval "$(starship init zsh)"

# alias

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

zinit load zdharma-continuum/history-search-multi-word
zinit load zsh-users/zsh-syntax-highlighting
zinit load zsh-users/zsh-autosuggestions
